<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.example.dao.TeacherMapper">

    <select id="getTeacher" resultType="Teacher">
        select * from teacher;
    </select>

    <!--按结果嵌套查询-->
    <select id="getTeacher2" resultMap="TeacherStudent">
        select s.id sid, s.name sname, t.name tname, t.id tid
            from student s, teacher t
            where s.tid = t.id and t.id = #{tid};
    </select>
    <resultMap id="TeacherStudent" type="Teacher">
        <result property="id" column="tid"/>
        <result property="name" column="tname"/>
        <!--复杂的属性，我们需要单独处理
            对象：使用 association
            集合：使用 collection
            javaType：指定的属性类型，集合中的泛型信息，我们使用 ofType 获取
        -->
        <collection property="students" ofType="Student">
            <result property="id" column="sid"/>
            <result property="name" column="sname"/>
            <result property="tid" column="tid"/>
        </collection>
    </resultMap>

    <!--=================================== 分割线 =========================================-->

    <!--按照查询嵌套处理-->
    <select id="getTeacher3" resultMap="TeacherStudent3">
        select * from teacher where id = #{tid};
    </select>
    <resultMap id="TeacherStudent3" type="Teacher">
        <collection property="students" javaType="ArrayList" ofType="Student" select="getStudentByTeacherId" column="id">
            <result property="id" column="id"/>
            <result property="name" column="name"/>
            <result property="tid" column="tid"/>
        </collection>
    </resultMap>
    <select id="getStudentByTeacherId" resultType="Student">
        select * from student where tid = #{tid};
    </select>

</mapper>